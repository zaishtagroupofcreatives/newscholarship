import './assets/main.css'
import 'bootstrap/dist/css/bootstrap.css'
// import bootstrap from '../bootstrap/dist/js/bootstrap.bundle.js'
import router from './router';

import { createApp } from 'vue'
import App from './App.vue'





import axios from 'axios'
import { BASE_API_URL } from '@/config'


(function bootstrapAuthFromUrl() {
  try {
    const hrefBefore = window.location.href;
    console.log("[auth] href BEFORE cleanup:", hrefBefore);

    const url = new URL(hrefBefore);
    const apiToken = url.searchParams.get("api_token");
    console.log("[auth] api_token (query):", apiToken);

    if (apiToken) {
      // Store the token for this tab
      sessionStorage.setItem("authToken", apiToken);

      // Remove api_token from the URL
      url.searchParams.delete("api_token");

      // Build cleaned URL and replace without reloading
      const cleaned =
          url.origin +
          url.pathname +
          (url.searchParams.toString() ? `?${url.searchParams.toString()}` : "") +
          url.hash;

      console.log("[auth] href AFTER cleanup:", cleaned);
      window.history.replaceState({}, "", cleaned);

      // Verify URL after replaceState
      const hrefAfter = window.location.href;
      console.log("[auth] href in browser after replaceState:", hrefAfter);

      // Let Vue render, then auto-open rating
      setTimeout(() => {
        const rateBtn = document.querySelector(".rate-btn");
        if (rateBtn) {
          console.log("[auth] clicking .rate-btn");
          rateBtn.click();
        } else {
          console.log("[auth] .rate-btn not found yet");
        }
      }, 800);
    } else {
      console.log("[auth] No api_token found in URL");
    }
  } catch (error) {
    console.error("[auth] Error processing URL auth:", error);
  }
})();

// Set axios default Authorization header if we have a token
const token = sessionStorage.getItem("authToken");
if (token) {
  axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  axios.defaults.baseURL = BASE_API_URL;
}


//createApp(App).use(bootstrap).mount('#app')
createApp(App).use(router).mount('#app');


jQuery(document).ready(function ($) {
    $('.navbar-toggler').on('click', function () {
      $('.navbar-collapse').toggleClass('open');
    });
  });

  jQuery(document).ready(function ($) {
    $('.close').on('click', function () {
      $('.navbar-collapse').removeClass('open');
    });
  });

  jQuery(document).ready(function ($) {
    $(".toggle-arrow").on("click", function () {
        $(this).toggleClass("active");
        $(this).next("ul").slideToggle();
    });
});

// jQuery(document).ready(function($) {
//   // Get the URL parameters
//   const urlParams = new URLSearchParams(window.location.search);
  
//   // Check if 'sold' parameter is true
//   if (urlParams.get('sold') === 'true') {
//     // Add the class to the body tag
//     $('body').addClass('sold-true');
//   }
// });


// jQuery(window).on('scroll', function () {
//   // Check if the screen width is greater than 768px (desktop)
//   if (window.innerWidth > 768) {
//     const firstColumn = jQuery('.first-column');
//     const secondColumn = jQuery('.second-column');
//     const firstColumnOffset = firstColumn.offset().top; // Top position of the first column
//     const scrollTop = jQuery(window).scrollTop(); // Current scroll position

//     // Calculate how far the scroll has progressed into the first column
//     const scrollIntoFirstColumn = scrollTop - firstColumnOffset;

//     // Add 'sticky' class when scrolling starts in the first column
//     if (scrollIntoFirstColumn >= 0 && scrollIntoFirstColumn < 100) {
//       secondColumn.addClass('sticky');
//     } else {
//       // Remove 'sticky' class after scrolling 200px into the first column
//       secondColumn.removeClass('sticky');
//     }
//   }
// });


$(document).ready(function () {
  $(".toggle").click(function () {
    $(this).toggleClass("active");
    $(this).next(".submenu").slideToggle();
  });
});

// balance payment popup

$(document).ready(function () {
  // Open the popup
  $('#balancePopupBtn').click(function () {
      $('#balancepopup, #overlay').fadeIn();
  });
  // Open the popup
  $('#verificationPopupBtn').click(function () {
    $('#verificationpopup, #overlay').fadeIn();
});
// Open the popup
$('#accountPopupBtn').click(function () {
  $('#accountpopup, #overlay').fadeIn();
});

  // Close the popup
  $('#closePopupBtn, #overlay').click(function () {
      $('#balancepopup, #accountpopup, #verificationpopup, #overlay').fadeOut();
  });
});

const ctx = document.getElementById('earningsChart').getContext('2d');
  const earningsChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: ['7 Mar', '8 Mar', '9 Mar', '10 Mar', '11 Mar', '12 Mar', '13 Mar'],
      datasets: [{
        label: 'Earnings',
        data: [0, 0, 0, 0, 0, 0, 0],
        borderColor: 'red',
        backgroundColor: 'transparent',
        pointRadius: 4,
        pointBackgroundColor: 'red',
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) { return 'US$' + value; }
          }
        }
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });

  export default {
    data() {
      return {
        addresses: [],
        selectedAddress: "",
      };
    },
    mounted() {
      this.fetchAddresses();
    },
    methods: {
      async fetchAddresses() {
        try {
          const response = await axios.get(`${BASE_API_URL}/v1/user/address`);
          if (response.data.status === "success") {
            this.addresses = response.data.data;
          } else {
            console.error("Failed to fetch addresses:", response.data.message);
          }
        } catch (error) {
          console.error("API Error:", error);
        }
      },
      formatAddress(address) {
        return `${address.address_line_1}, ${address.city}, ${address.state_province_or_region} ${address.zip_or_postal_code}`;
      },
    },
  };





